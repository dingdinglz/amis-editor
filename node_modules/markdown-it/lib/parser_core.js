amis.define('node_modules/markdown-it/lib/parser_core', function(require, exports, module, define) {

  /** internal
   * class Core
   *
   * Top-level rules executor. Glues block/inline parsers and does intermediate
   * transformations.
   **/
  'use strict';
  
  
  var Ruler  = require('node_modules/markdown-it/lib/ruler');
  
  
  var _rules = [
    [ 'normalize',      require('node_modules/markdown-it/lib/rules_core/normalize')      ],
    [ 'block',          require('node_modules/markdown-it/lib/rules_core/block')          ],
    [ 'inline',         require('node_modules/markdown-it/lib/rules_core/inline')         ],
    [ 'linkify',        require('node_modules/markdown-it/lib/rules_core/linkify')        ],
    [ 'replacements',   require('node_modules/markdown-it/lib/rules_core/replacements')   ],
    [ 'smartquotes',    require('node_modules/markdown-it/lib/rules_core/smartquotes')    ]
  ];
  
  
  /**
   * new Core()
   **/
  function Core() {
    /**
     * Core#ruler -> Ruler
     *
     * [[Ruler]] instance. Keep configuration of core rules.
     **/
    this.ruler = new Ruler();
  
    for (var i = 0; i < _rules.length; i++) {
      this.ruler.push(_rules[i][0], _rules[i][1]);
    }
  }
  
  
  /**
   * Core.process(state)
   *
   * Executes core chain rules.
   **/
  Core.prototype.process = function (state) {
    var i, l, rules;
  
    rules = this.ruler.getRules('');
  
    for (i = 0, l = rules.length; i < l; i++) {
      rules[i](state);
    }
  };
  
  Core.prototype.State = require('node_modules/markdown-it/lib/rules_core/state_core');
  
  
  module.exports = Core;
  

});
