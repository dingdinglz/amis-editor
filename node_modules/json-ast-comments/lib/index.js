amis.define('node_modules/json-ast-comments/lib/index', function(require, exports, module, define) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.stringify = exports.parse = exports.parser = void 0;
  var parser = require("node_modules/json-ast-comments/lib/json");
  exports.parser = parser;
  function parseDocument(doc) {
      var len = doc.body.length;
      var i = 0;
      while (i < len) {
          var node = doc.body[i];
          if (node.type !== "comment") {
              return parseNode(node);
          }
          i++;
      }
      throw new Error("Json 格式错误，数值为空");
  }
  function parseComment(comment) {
      return comment.value;
  }
  function parseString(ast) {
      return ast.value;
  }
  function parseNull(ast) {
      return ast.value;
  }
  function parseBoolean(ast) {
      return ast.value;
  }
  function parseNumber(ast) {
      return ast.value;
  }
  function parseArray(ast, commentsHost) {
      var arr = [];
      var leadingComments = [];
      ast.members.forEach(function (member, index) {
          var prevMemeber = null;
          var i = index - 1;
          while (i >= 0) {
              prevMemeber = ast.members[i];
              if (prevMemeber.type !== "comment") {
                  break;
              }
              i--;
          }
          if (member.type !== "comment") {
              if (commentsHost) {
                  commentsHost[arr.length] = [
                      leadingComments.length ? leadingComments : 0,
                  ];
              }
              arr.push(parseNode(member));
              leadingComments = [];
          }
          else {
              if (commentsHost &&
                  (prevMemeber === null || prevMemeber === void 0 ? void 0 : prevMemeber.type) !== "comment" &&
                  (prevMemeber === null || prevMemeber === void 0 ? void 0 : prevMemeber.range.end.line) === member.range.start.line) {
                  commentsHost[arr.length - 1][1] = commentsHost[arr.length - 1][1] || [];
                  commentsHost[arr.length - 1][1].push(parseNode(member));
              }
              else {
                  leadingComments.push(parseNode(member));
              }
          }
      });
      if (leadingComments.length && commentsHost) {
          commentsHost.$$ = leadingComments;
      }
      return arr;
  }
  function parseObject(ast) {
      var obj = {};
      obj.$$comments = obj.$$comments || {};
      var outTrailingComments = [];
      ast.members.forEach(function (member, index) {
          var _a, _b, _c;
          if (member.type === "comment") {
              outTrailingComments.push(parseNode(member));
              return;
          }
          var prevMemeber = index > 0 ? ast.members[index - 1] : null;
          var prevKeyNode = (_a = prevMemeber) === null || _a === void 0 ? void 0 : _a.key.filter(function (member) { return member.type !== "comment"; })[0];
          var prevKey = prevKeyNode ? parseNode(prevKeyNode) : "";
          var prevValueNode = (_b = prevMemeber) === null || _b === void 0 ? void 0 : _b.value.filter(function (member) { return member.type !== "comment"; })[0];
          var leadingComments = [];
          var leftComments = [];
          var rightComments = [];
          var trailingComments = [];
          var keyNode = null;
          var valueNode = null;
          member.key.forEach(function (member) {
              if (member.type !== "comment") {
                  keyNode = member;
              }
              else if (keyNode) {
                  leftComments.push(parseNode(member));
              }
              else {
                  if (prevValueNode &&
                      (member === null || member === void 0 ? void 0 : member.range.start.line) === (prevValueNode === null || prevValueNode === void 0 ? void 0 : prevValueNode.range.end.line)) {
                      obj.$$comments[prevKey][4] = obj.$$comments[prevKey][4] || [];
                      obj.$$comments[prevKey][4].push(parseNode(member));
                  }
                  else {
                      leadingComments.push(parseNode(member));
                  }
              }
          });
          member.value.forEach(function (member) {
              if (member.type !== "comment") {
                  valueNode = member;
              }
              else if (valueNode) {
                  trailingComments.push(parseNode(member));
              }
              else {
                  rightComments.push(parseNode(member));
              }
          });
          var key = parseNode(keyNode);
          if (((_c = valueNode) === null || _c === void 0 ? void 0 : _c.type) === "array") {
              obj.$$comments["$" + key] = {};
              obj[key] = parseNode(valueNode, obj.$$comments["$" + key]);
          }
          else {
              obj[key] = parseNode(valueNode);
          }
          obj.$$comments[key] = [
              leadingComments.length ? leadingComments : 0,
              leftComments.length ? leftComments : 0,
              rightComments.length ? rightComments : 0,
              trailingComments.length ? trailingComments : 0,
          ];
      });
      if (outTrailingComments.length) {
          obj.$$comments = obj.$$comments || {};
          obj.$$comments.$$ = outTrailingComments;
      }
      clearup(obj);
      return obj;
  }
  function parseNode(ast, commentsHost) {
      if (ast.type === "document") {
          return parseDocument(ast);
      }
      else if (ast.type === "comment") {
          return parseComment(ast);
      }
      else if (ast.type === "string") {
          return parseString(ast);
      }
      else if (ast.type === "null") {
          return parseNull(ast);
      }
      else if (ast.type === "boolean") {
          return parseBoolean(ast);
      }
      else if (ast.type === "number") {
          return parseNumber(ast);
      }
      else if (ast.type === "array") {
          return parseArray(ast, commentsHost);
      }
      else if (ast.type === "object") {
          return parseObject(ast);
      }
      else {
          throw new Error("Unknown ast type: " + ast.type);
      }
  }
  function parse(text) {
      var ast = parser.parse(text);
      return parseNode(ast);
  }
  exports.parse = parse;
  function stringify(json) {
      return stringifyNode(json);
  }
  exports.stringify = stringify;
  var tabSize = 2;
  function whitespace(len) {
      var ret = "";
      while (len-- > 0) {
          ret += " ";
      }
      return ret;
  }
  function clearup(obj) {
      if (!obj.$$comments) {
          return;
      }
      Object.keys(obj.$$comments).forEach(function (key) {
          var value = obj.$$comments[key];
          if (key[0] === "$" && isPlainObject(value)) {
              var keys = Object.keys(value);
              if (keys.length) {
                  keys.forEach(function (childKey) {
                      if (childKey !== "$$") {
                          var child = value[childKey];
                          var len = child.length;
                          while (len-- > 0) {
                              if (!child[len]) {
                                  child.splice(len, 1);
                              }
                              else {
                                  break;
                              }
                          }
                          if (!child.length) {
                              delete value[childKey];
                          }
                      }
                  });
              }
              if (!Object.keys(value).length) {
                  delete obj.$$comments[key];
              }
          }
          else if (Array.isArray(value)) {
              var len = value.length;
              while (len-- > 0) {
                  if (!value[len]) {
                      value.splice(len, 1);
                  }
                  else {
                      break;
                  }
              }
              if (!value.length) {
                  delete obj.$$comments[key];
              }
          }
      });
      if (!Object.keys(obj.$$comments).length) {
          delete obj.$$comments;
      }
  }
  function stringifyNode(rootNode, indent, hostComments) {
      if (indent === void 0) { indent = 0; }
      if (isPlainObject(rootNode)) {
          var commentsObj_1 = rootNode.$$comments;
          var keys = Object.keys(rootNode);
          var idx = keys.indexOf("$$comments");
          if (~idx) {
              keys.splice(idx, 1);
          }
          var len_1 = keys.length;
          var lines_1 = ["{"];
          keys.forEach(function (key, index) {
              var comment = commentsObj_1 === null || commentsObj_1 === void 0 ? void 0 : commentsObj_1[key];
              var value = rootNode[key];
              var prefix = "";
              var middle = "";
              if (comment) {
                  prefix = (comment[0] ? comment[0].join("") : "") + "\"" + key + "\"";
                  middle = (comment[1] ? comment[1].join("") : "") + ":" + (comment[2] ? comment[2].join("") : " ") + stringifyNode(value, indent + tabSize, commentsObj_1 === null || commentsObj_1 === void 0 ? void 0 : commentsObj_1["$" + key]) + (comment[3] ? comment[3].join("").replace(/\n *$/, '') : "") + (len_1 - 1 === index ? "" : ",") + (comment[4] ? comment[4].join("").replace(/\n *$/, '') : "");
                  prefix = prefix
                      .replace(/^\n/, "")
                      .replace(/(\n|^) *?([^\s])/g, function (_, lb, firstword) {
                      return "" + lb + whitespace(indent + tabSize) + (firstword === "*" ? " *" : firstword);
                  });
              }
              else {
                  prefix = whitespace(indent + tabSize) + "\"" + key + "\"";
                  middle = ": " + stringifyNode(value, indent + tabSize, commentsObj_1 === null || commentsObj_1 === void 0 ? void 0 : commentsObj_1["$" + key]) + (len_1 - 1 === index ? "" : ",");
              }
              lines_1.push(prefix + middle);
          });
          if (Array.isArray(commentsObj_1 === null || commentsObj_1 === void 0 ? void 0 : commentsObj_1.$$)) {
              var comments = ("" + commentsObj_1.$$.join(""))
                  .trim()
                  .replace(/(\n|^) *?([^\s])/g, function (_, lb, firstword) {
                  return "" + lb + whitespace(indent + tabSize) + (firstword === "*" ? " *" : firstword);
              });
              lines_1.push(comments);
          }
          lines_1.push(whitespace(indent) + "}");
          return lines_1.join("\n");
      }
      else if (Array.isArray(rootNode)) {
          var lines_2 = ["["];
          var len_2 = rootNode.length;
          rootNode.forEach(function (child, index) {
              var comments = hostComments === null || hostComments === void 0 ? void 0 : hostComments[index];
              if (Array.isArray(comments)) {
                  var prefix = "" + (comments[0] ? comments[0].join("").replace(/^\n/, "") : "");
                  var rest = "" + stringifyNode(child, indent + tabSize) + (len_2 - 1 === index ? "" : ",") + (comments[1] ? comments[1].join("") : "");
                  prefix = (prefix + rest.substring(0, 1))
                      .replace(/^\n/, "")
                      .replace(/(\n|^) *?([^\s])/g, function (_, lb, firstword) {
                      return "" + lb + whitespace(indent + tabSize) + (firstword === "*" ? " *" : firstword);
                  });
                  lines_2.push(prefix + rest.substring(1));
              }
              else {
                  lines_2.push(whitespace(indent + tabSize) +
                      stringifyNode(child, indent + tabSize) +
                      (len_2 - 1 === index ? "" : ","));
              }
          });
          if (Array.isArray(hostComments === null || hostComments === void 0 ? void 0 : hostComments.$$)) {
              lines_2.push(hostComments.$$.join("")
                  .replace(/^\n|\n$/g, "")
                  .replace(/(\n|^) *?([^\s])/g, function (_, lb, firstword) {
                  return "" + lb + whitespace(indent + tabSize) + (firstword === "*" ? " *" : firstword);
              }));
          }
          lines_2.push(whitespace(indent) + "]");
          return lines_2.join("\n");
      }
      return JSON.stringify(rootNode, null, tabSize);
  }
  function isPlainObject(obj) {
      return Object.prototype.toString.call(obj) === "[object Object]";
  }
  

});
